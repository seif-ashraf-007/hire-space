openapi: 3.0.3
info:
  title: HireSpace API
  description: Workspace booking platform connecting customers with flexible office spaces
  version: 1.0.0
  contact:
    email: api@hirespace.com
  license:
    name: MIT
servers:
  - url: https://hirepsace.blockhaven.net/api/
    description: Production server
  - url: http://localhost:8000/api
    description: Development server

paths:
  # Authentication
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "400":
          $ref: "#/components/responses/ValidationError"
        "409":
          $ref: "#/components/responses/ConflictError"

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshTokenRequest"
      responses:
        "200":
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenResponse"

  # Users
  /users/me:
    get:
      tags:
        - Users
      summary: Get current user profile
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User profile retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    put:
      tags:
        - Users
      summary: Update current user profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequest"
      responses:
        "200":
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  # Rooms
  /rooms:
    get:
      tags:
        - Rooms
      summary: Search available rooms
      parameters:
        - name: location
          in: query
          required: true
          schema:
            type: string
          example: "New York"
        - name: date
          in: query
          required: true
          schema:
            type: string
            format: date
          example: "2024-01-15"
        - name: startTime
          in: query
          required: true
          schema:
            type: string
            pattern: "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"
          example: "09:00"
        - name: endTime
          in: query
          required: true
          schema:
            type: string
            pattern: "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"
          example: "17:00"
        - name: capacity
          in: query
          schema:
            type: integer
            minimum: 1
        - name: maxPrice
          in: query
          schema:
            type: number
            format: float
        - name: amenities
          in: query
          schema:
            type: string
          description: Comma-separated list of amenities
          example: "wifi,projector,parking"
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        "200":
          description: Rooms retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoomSearchResponse"

  /rooms/{roomId}:
    get:
      tags:
        - Rooms
      summary: Get room details
      parameters:
        - name: roomId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Room details retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoomDetails"
        "404":
          $ref: "#/components/responses/NotFoundError"
    put:
      tags:
        - Rooms
      summary: Update room (Owner only)
      security:
        - bearerAuth: []
      parameters:
        - name: roomId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateRoomRequest"
      responses:
        "200":
          description: Room updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Room"
        "403":
          $ref: "#/components/responses/ForbiddenError"
    delete:
      tags:
        - Rooms
      summary: Delete room (Owner only)
      security:
        - bearerAuth: []
      parameters:
        - name: roomId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Room deleted successfully
        "403":
          $ref: "#/components/responses/ForbiddenError"

  /rooms/{roomId}/availability:
    get:
      tags:
        - Rooms
      summary: Check room availability for a specific date
      parameters:
        - name: roomId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: date
          in: query
          required: true
          schema:
            type: string
            format: date
      responses:
        "200":
          description: Room availability retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoomAvailability"

  # Spaces
  /spaces:
    post:
      tags:
        - Spaces
      summary: Create new space (Owner only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSpaceRequest"
      responses:
        "201":
          description: Space created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Space"
        "403":
          $ref: "#/components/responses/ForbiddenError"

  /spaces/{spaceId}:
    get:
      tags:
        - Spaces
      summary: Get space details with rooms
      parameters:
        - name: spaceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Space details retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SpaceWithRooms"
    put:
      tags:
        - Spaces
      summary: Update space (Owner only)
      security:
        - bearerAuth: []
      parameters:
        - name: spaceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateSpaceRequest"
      responses:
        "200":
          description: Space updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Space"
    delete:
      tags:
        - Spaces
      summary: Delete space (Owner only)
      security:
        - bearerAuth: []
      parameters:
        - name: spaceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Space deleted successfully

  /spaces/{spaceId}/rooms:
    post:
      tags:
        - Spaces
      summary: Create room in space (Owner only)
      security:
        - bearerAuth: []
      parameters:
        - name: spaceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateRoomRequest"
      responses:
        "201":
          description: Room created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Room"

  # Bookings
  /bookings/hold:
    post:
      tags:
        - Bookings
      summary: Create 15-minute booking hold
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateBookingHoldRequest"
      responses:
        "201":
          description: Booking hold created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookingHold"
        "409":
          $ref: "#/components/responses/ConflictError"

  /bookings/{bookingId}/confirm:
    post:
      tags:
        - Bookings
      summary: Confirm booking with payment
      security:
        - bearerAuth: []
      parameters:
        - name: bookingId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConfirmBookingRequest"
      responses:
        "200":
          description: Booking confirmed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConfirmedBooking"
        "410":
          description: Booking hold has expired
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /bookings/me:
    get:
      tags:
        - Bookings
      summary: Get current user's bookings
      security:
        - bearerAuth: []
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [hold, confirmed, cancelled, completed]
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        "200":
          description: User bookings retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookingsResponse"

  /bookings/{bookingId}:
    get:
      tags:
        - Bookings
      summary: Get booking details
      security:
        - bearerAuth: []
      parameters:
        - name: bookingId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Booking details retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookingDetails"

  /bookings/{bookingId}/cancel:
    post:
      tags:
        - Bookings
      summary: Cancel booking
      security:
        - bearerAuth: []
      parameters:
        - name: bookingId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CancelBookingRequest"
      responses:
        "200":
          description: Booking cancelled successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookingDetails"

  # Owner Dashboard
  /owner/spaces:
    get:
      tags:
        - Owner Dashboard
      summary: Get owner's spaces and rooms
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Owner spaces retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OwnerSpacesResponse"

  /owner/rooms/{roomId}/bookings:
    get:
      tags:
        - Owner Dashboard
      summary: Get room bookings
      security:
        - bearerAuth: []
      parameters:
        - name: roomId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: status
          in: query
          schema:
            type: string
            enum: [confirmed, cancelled, completed]
        - name: date
          in: query
          schema:
            type: string
            format: date
      responses:
        "200":
          description: Room bookings retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookingsResponse"

  # Payments
  /payments/stripe/webhook:
    post:
      tags:
        - Payments
      summary: Stripe webhook endpoint
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        "200":
          description: Webhook processed successfully

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Auth Schemas
    RegisterRequest:
      type: object
      required:
        - email
        - password
        - firstName
        - lastName
        - role
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
        firstName:
          type: string
          minLength: 1
        lastName:
          type: string
          minLength: 1
        role:
          type: string
          enum: [customer, owner]

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    RefreshTokenRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string

    AuthResponse:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/User"
        tokens:
          $ref: "#/components/schemas/TokenResponse"

    TokenResponse:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string

    # User Schemas
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        phone:
          type: string
        role:
          type: string
          enum: [customer, owner, admin]
        createdAt:
          type: string
          format: date-time

    UpdateUserRequest:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        phone:
          type: string

    # Space Schemas
    Space:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        address:
          type: string
        latitude:
          type: number
          format: float
        longitude:
          type: number
          format: float
        amenities:
          type: array
          items:
            type: string
        photos:
          type: array
          items:
            type: string
            format: uri
        status:
          type: string
          enum: [active, inactive, suspended]
        owner:
          $ref: "#/components/schemas/UserSummary"
        createdAt:
          type: string
          format: date-time

    CreateSpaceRequest:
      type: object
      required:
        - name
        - description
        - address
      properties:
        name:
          type: string
          minLength: 1
        description:
          type: string
        address:
          type: string
        amenities:
          type: array
          items:
            type: string
        photos:
          type: array
          items:
            type: string

    UpdateSpaceRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        address:
          type: string
        amenities:
          type: array
          items:
            type: string
        photos:
          type: array
          items:
            type: string

    SpaceWithRooms:
      allOf:
        - $ref: "#/components/schemas/Space"
        - type: object
          properties:
            rooms:
              type: array
              items:
                $ref: "#/components/schemas/Room"

    # Room Schemas
    Room:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        capacity:
          type: integer
          minimum: 1
        pricePerHour:
          type: number
          format: float
        amenities:
          type: array
          items:
            type: string
        photos:
          type: array
          items:
            type: string
            format: uri
        rules:
          type: string
        status:
          type: string
          enum: [active, inactive, maintenance]
        spaceId:
          type: string
          format: uuid

    RoomDetails:
      allOf:
        - $ref: "#/components/schemas/Room"
        - type: object
          properties:
            space:
              $ref: "#/components/schemas/SpaceSummary"
            owner:
              $ref: "#/components/schemas/UserSummary"
            reviews:
              $ref: "#/components/schemas/ReviewsSummary"

    CreateRoomRequest:
      type: object
      required:
        - name
        - description
        - capacity
        - pricePerHour
      properties:
        name:
          type: string
          minLength: 1
        description:
          type: string
        capacity:
          type: integer
          minimum: 1
        pricePerHour:
          type: number
          format: float
          minimum: 0
        amenities:
          type: array
          items:
            type: string
        rules:
          type: string
        photos:
          type: array
          items:
            type: string

    UpdateRoomRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        capacity:
          type: integer
          minimum: 1
        pricePerHour:
          type: number
          format: float
          minimum: 0
        amenities:
          type: array
          items:
            type: string
        rules:
          type: string
        photos:
          type: array
          items:
            type: string

    RoomSearchResponse:
      type: object
      properties:
        rooms:
          type: array
          items:
            $ref: "#/components/schemas/RoomSearchResult"
        pagination:
          $ref: "#/components/schemas/Pagination"

    RoomSearchResult:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        capacity:
          type: integer
        pricePerHour:
          type: number
          format: float
        amenities:
          type: array
          items:
            type: string
        photos:
          type: array
          items:
            type: string
            format: uri
        space:
          $ref: "#/components/schemas/SpaceSummary"
        owner:
          $ref: "#/components/schemas/UserSummary"
        available:
          type: boolean

    RoomAvailability:
      type: object
      properties:
        date:
          type: string
          format: date
        availableSlots:
          type: array
          items:
            $ref: "#/components/schemas/TimeSlot"
        bookedSlots:
          type: array
          items:
            $ref: "#/components/schemas/TimeSlot"

    # Booking Schemas
    CreateBookingHoldRequest:
      type: object
      required:
        - roomId
        - date
        - startTime
        - endTime
      properties:
        roomId:
          type: string
          format: uuid
        date:
          type: string
          format: date
        startTime:
          type: string
          pattern: "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"
        endTime:
          type: string
          pattern: "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"

    BookingHold:
      type: object
      properties:
        id:
          type: string
          format: uuid
        roomId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        date:
          type: string
          format: date
        startTime:
          type: string
        endTime:
          type: string
        status:
          type: string
          enum: [hold]
        totalPrice:
          type: number
          format: float
        platformFee:
          type: number
          format: float
        finalPrice:
          type: number
          format: float
        expiresAt:
          type: string
          format: date-time
        holdToken:
          type: string

    ConfirmBookingRequest:
      type: object
      required:
        - holdToken
        - paymentMethodId
      properties:
        holdToken:
          type: string
        paymentMethodId:
          type: string

    ConfirmedBooking:
      type: object
      properties:
        id:
          type: string
          format: uuid
        status:
          type: string
          enum: [confirmed]
        paymentId:
          type: string
        space:
          $ref: "#/components/schemas/SpaceSummary"
        room:
          $ref: "#/components/schemas/RoomSummary"
        booking:
          $ref: "#/components/schemas/BookingSummary"

    BookingDetails:
      type: object
      properties:
        id:
          type: string
          format: uuid
        roomId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        date:
          type: string
          format: date
        startTime:
          type: string
        endTime:
          type: string
        status:
          type: string
          enum: [hold, confirmed, cancelled, completed]
        totalPrice:
          type: number
          format: float
        platformFee:
          type: number
          format: float
        finalPrice:
          type: number
          format: float
        room:
          $ref: "#/components/schemas/RoomSummary"
        space:
          $ref: "#/components/schemas/SpaceSummary"
        createdAt:
          type: string
          format: date-time

    BookingsResponse:
      type: object
      properties:
        bookings:
          type: array
          items:
            $ref: "#/components/schemas/BookingDetails"
        pagination:
          $ref: "#/components/schemas/Pagination"

    CancelBookingRequest:
      type: object
      required:
        - reason
      properties:
        reason:
          type: string

    # Owner Dashboard Schemas
    OwnerSpacesResponse:
      type: object
      properties:
        spaces:
          type: array
          items:
            $ref: "#/components/schemas/OwnerSpaceSummary"

    OwnerSpaceSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        status:
          type: string
          enum: [active, inactive, suspended]
        totalRooms:
          type: integer
        bookingsThisMonth:
          type: integer
        revenueThisMonth:
          type: number
          format: float
        averageRating:
          type: number
          format: float
        photos:
          type: array
          items:
            type: string
            format: uri
        rooms:
          type: array
          items:
            $ref: "#/components/schemas/OwnerRoomSummary"

    OwnerRoomSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        bookingsThisMonth:
          type: integer
        revenueThisMonth:
          type: number
          format: float

    # Helper Schemas
    UserSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        firstName:
          type: string
        lastName:
          type: string
        phone:
          type: string

    SpaceSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        address:
          type: string
        latitude:
          type: number
          format: float
        longitude:
          type: number
          format: float
        amenities:
          type: array
          items:
            type: string

    RoomSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        photos:
          type: array
          items:
            type: string
            format: uri

    BookingSummary:
      type: object
      properties:
        date:
          type: string
          format: date
        startTime:
          type: string
        endTime:
          type: string
        totalPrice:
          type: number
          format: float
        platformFee:
          type: number
          format: float
        finalPrice:
          type: number
          format: float

    ReviewsSummary:
      type: object
      properties:
        average:
          type: number
          format: float
        count:
          type: integer

    TimeSlot:
      type: object
      properties:
        startTime:
          type: string
        endTime:
          type: string

    Pagination:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        pages:
          type: integer

    # Error Schemas
    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
            message:
              type: string
            details:
              type: array
              items:
                type: object
                properties:
                  field:
                    type: string
                  message:
                    type: string
        timestamp:
          type: string
          format: date-time
        path:
          type: string

  responses:
    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            error:
              code: "VALIDATION_ERROR"
              message: "Invalid input data"
              details:
                - field: "email"
                  message: "Email is required"
            timestamp: "2024-01-01T00:00:00Z"
            path: "/auth/register"

    UnauthorizedError:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            error:
              code: "UNAUTHORIZED"
              message: "Authentication required"
            timestamp: "2024-01-01T00:00:00Z"
            path: "/users/me"

    ForbiddenError:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            error:
              code: "FORBIDDEN"
              message: "Insufficient permissions"
            timestamp: "2024-01-01T00:00:00Z"
            path: "/spaces/uuid"

    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            error:
              code: "NOT_FOUND"
              message: "Resource not found"
            timestamp: "2024-01-01T00:00:00Z"
            path: "/rooms/uuid"

    ConflictError:
      description: Resource conflict
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            error:
              code: "CONFLICT"
              message: "Room not available for selected time"
            timestamp: "2024-01-01T00:00:00Z"
            path: "/bookings/hold"

tags:
  - name: Authentication
    description: User registration and login
  - name: Users
    description: User profile management
  - name: Spaces
    description: Space management for owners
  - name: Rooms
    description: Room search and details
  - name: Bookings
    description: Booking management with hold system
  - name: Owner Dashboard
    description: Space owner management tools
  - name: Payments
    description: Payment processing webhooks
